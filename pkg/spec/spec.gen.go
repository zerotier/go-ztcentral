// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package spec

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for InviteStatus.
const (
	InviteStatusAccepted InviteStatus = "accepted"

	InviteStatusCanceled InviteStatus = "canceled"

	InviteStatusPending InviteStatus = "pending"
)

// APIToken defines model for APIToken.
type APIToken struct {

	// API Token.  Minimum 32 characters. This token is encrypted in the database and can not be retrieved once set
	Token *string `json:"token,omitempty"`

	// user specified token name
	TokenName *string `json:"tokenName,omitempty"`
}

// AuthMethods defines model for AuthMethods.
type AuthMethods struct {

	// Google OIDC ID
	Google *string `json:"google"`

	// email address for built-in authentication
	Local *string `json:"local"`

	// Generic OIDC ID
	Oidc *string `json:"oidc"`
}

// DNS defines model for DNS.
type DNS struct {

	// Search domain to use for DNS records
	Domain *string `json:"domain,omitempty"`

	// IP address of unicast DNS service
	Servers *[]string `json:"servers"`
}

// IPRange defines model for IPRange.
type IPRange struct {
	IpRangeEnd   *string `json:"ipRangeEnd,omitempty"`
	IpRangeStart *string `json:"ipRangeStart,omitempty"`
}

// IPV4AssignMode defines model for IPV4AssignMode.
type IPV4AssignMode struct {
	Zt *bool `json:"zt,omitempty"`
}

// IPV6AssignMode defines model for IPV6AssignMode.
type IPV6AssignMode struct {
	N6plane *bool `json:"6plane"`
	Rfc4193 *bool `json:"rfc4193"`
	Zt      *bool `json:"zt"`
}

// InviteStatus defines model for InviteStatus.
type InviteStatus string

// Member defines model for Member.
type Member struct {

	// ZeroTier version the member is running
	ClientVersion *string       `json:"clientVersion"`
	Clock         *int64        `json:"clock"`
	Config        *MemberConfig `json:"config,omitempty"`
	ControllerId  *string       `json:"controllerId"`

	// User defined description of the member
	Description *string `json:"description"`

	// Whether or not the member is hidden in the UI
	Hidden *bool `json:"hidden"`

	// concatenation of network ID and member ID
	Id *string `json:"id"`

	// Last seen time of the member.  Note: This data is considered ephemeral and may be reset to 0 at any time without warning.
	LastOnline *int64 `json:"lastOnline"`

	// User defined name of the member
	Name      *string `json:"name"`
	NetworkId *string `json:"networkId"`

	// ZeroTier ID of the member
	NodeId *string `json:"nodeId"`

	// IP address the member last spoke to the controller via.  Note: This data is considered ephemeral and may be reset to 0 at any time without warning.
	PhysicalAddress *string `json:"physicalAddress"`

	// ZeroTier protocol version
	ProtocolVersion *int `json:"protocolVersion"`

	// Whether or not the client version is new enough to support the rules engine (1.4.0+)
	SupportsRulesEngine *bool `json:"supportsRulesEngine"`
}

// MemberConfig defines model for MemberConfig.
type MemberConfig struct {

	// Allow the member to be a bridge on the network
	ActiveBridge *bool `json:"activeBridge"`

	// Is the member authorized on the network
	Authorized   *bool  `json:"authorized"`
	Capabilities *[]int `json:"capabilities"`

	// Time the member was created or first tried to join the network
	CreationTime *int64 `json:"creationTime"`

	// ID of the member node.  This is the 10 digit identifier that identifies a ZeroTier node.
	Id *string `json:"id"`

	// Public Key of the member's Identity
	Identity *string `json:"identity"`

	// List of assigned IP addresses
	IpAssignments *[]string `json:"ipAssignments"`

	// Time the member was authorized on the network
	LastAuthorizedTime *int64 `json:"lastAuthorizedTime"`

	// Time the member was deauthorized on the network
	LastDeauthorizedTime *int64 `json:"lastDeauthorizedTime"`

	// Exempt this member from the IP auto assignment pool on a Network
	NoAutoAssignIps *bool `json:"noAutoAssignIps"`

	// Member record revision count
	Revision *int `json:"revision"`

	// Array of 2 member tuples of tag [ID, tag value]
	// Tags *[][]interface{} `json:"tags"`

	// Major version of the client
	VMajor *int `json:"vMajor"`

	// Minor version of the client
	VMinor *int `json:"vMinor"`

	// Protocol version of the client
	VProto *int `json:"vProto"`

	// Revision number of the client
	VRev *int `json:"vRev"`
}

// Network object
type Network struct {
	AuthorizedMemberCount *int                    `json:"authorizedMemberCount"`
	CapabilitiesByName    *map[string]interface{} `json:"capabilitiesByName"`
	Clock                 *int64                  `json:"clock"`
	Config                *NetworkConfig          `json:"config,omitempty"`
	Description           *string                 `json:"description"`
	Id                    *string                 `json:"id"`

	// Note: May be 0 on endpoints returning lists of Networks
	OnlineMemberCount *int                    `json:"onlineMemberCount"`
	OwnerId           *string                 `json:"ownerId"`
	Permissions       *PermissionsMap         `json:"permissions,omitempty"`
	RulesSource       *string                 `json:"rulesSource"`
	TagsByName        *map[string]interface{} `json:"tagsByName"`
	TotalMemberCount  *int                    `json:"totalMemberCount"`
}

// NetworkConfig defines model for NetworkConfig.
type NetworkConfig struct {

	// Array of network capabilities
	Capabilities *[]map[string]interface{} `json:"capabilities"`

	// Time the network was created
	CreationTime *int64 `json:"creationTime"`
	Dns          *DNS   `json:"dns,omitempty"`

	// Enable broadcast packets on the network
	EnableBroadcast *bool `json:"enableBroadcast"`

	// Network ID
	Id *string `json:"id"`

	// Range of IP addresses for the auto assign pool
	IpAssignmentPools *[]IPRange `json:"ipAssignmentPools"`

	// Time the network was last modified
	LastModified *int64 `json:"lastModified"`

	// MTU to set on the client virtual network adapter
	Mtu *int `json:"mtu"`

	// Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
	MulticastLimit *int    `json:"multicastLimit"`
	Name           *string `json:"name"`

	// Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
	Private      *bool                     `json:"private"`
	Routes       *[]Route                  `json:"routes"`
	Rules        *[]map[string]interface{} `json:"rules"`
	Tags         *[]map[string]interface{} `json:"tags"`
	V4AssignMode *IPV4AssignMode           `json:"v4AssignMode,omitempty"`
	V6AssignMode *IPV6AssignMode           `json:"v6AssignMode,omitempty"`
}

// Organization defines model for Organization.
type Organization struct {

	// Organization ID
	Id *string `json:"id,omitempty"`

	// List of organization members
	Members *[]OrganizationMember `json:"members,omitempty"`

	// Organization owner's email address
	OwnerEmail *string `json:"ownerEmail,omitempty"`

	// User ID of the organization owner
	OwnerId   *string    `json:"ownerId,omitempty"`
	SsoConfig *SsoConfig `json:"ssoConfig,omitempty"`
}

// OrganizationInvitation defines model for OrganizationInvitation.
type OrganizationInvitation struct {

	// Creation time of the invite
	CreationTime *int64 `json:"creation_time,omitempty"`

	// Email address of invitee
	Email *string `json:"email,omitempty"`

	// Invitation ID
	Id *string `json:"id,omitempty"`

	// Organization ID
	OrgId *string `json:"orgId,omitempty"`

	// Organization owner email address
	OwnerEmail *string `json:"ownerEmail,omitempty"`

	// Invitation status
	Status *struct {
		// Embedded struct due to allOf(#/components/schemas/InviteStatus)
		InviteStatus `yaml:",inline"`
	} `json:"status,omitempty"`

	// Last updated time of the invitation
	UpdateTime *int64 `json:"update_time,omitempty"`
}

// OrganizationMember defines model for OrganizationMember.
type OrganizationMember struct {

	// Organization member email address
	Email *string `json:"email"`

	// Organization member display name
	Name *string `json:"name"`

	// Organization ID
	OrgId *string `json:"orgId,omitempty"`

	// User ID
	UserId *string `json:"userId,omitempty"`
}

// Permissions defines model for Permissions.
type Permissions struct {

	// Authorize permission
	A *bool `json:"a,omitempty"`

	// Delete permission
	D *bool `json:"d,omitempty"`

	// Modify network settings permission
	M *bool `json:"m,omitempty"`

	// Read network settings permission
	R *bool `json:"r,omitempty"`
}

// PermissionsMap defines model for PermissionsMap.
type PermissionsMap struct {
	AdditionalProperties map[string]Permissions `json:"-"`
}

// RandomToken defines model for RandomToken.
type RandomToken struct {

	// Current time on server
	Clock *int64 `json:"clock,omitempty"`

	// hex encoded random bytes of the token
	Hex *string `json:"hex,omitempty"`

	// Random 32 character token
	Token *string `json:"token,omitempty"`
}

// Route defines model for Route.
type Route struct {
	Target *string `json:"target,omitempty"`
	Via    *string `json:"via"`
}

// SsoConfig defines model for SsoConfig.
type SsoConfig struct {

	// OIDC Client ID
	ClientId *string `json:"clientId,omitempty"`

	// Enabled flag for SSO
	Enabled *bool `json:"enabled,omitempty"`

	// OIDC Issuer URL
	Issuer *string `json:"issuer,omitempty"`
}

// Status defines model for Status.
type Status struct {
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Current time on server
	Clock        *int64  `json:"clock,omitempty"`
	Id           *string `json:"id,omitempty"`
	LoginMethods *struct {
		Facebook *bool `json:"facebook,omitempty"`
		Github   *bool `json:"github,omitempty"`
		Google   *bool `json:"google,omitempty"`
		Local    *bool `json:"local,omitempty"`
		Oidc     *bool `json:"oidc,omitempty"`
		Saml     *bool `json:"saml,omitempty"`
		Twitter  *bool `json:"twitter,omitempty"`
	} `json:"loginMethods,omitempty"`
	ReadOnlyMode *bool   `json:"readOnlyMode,omitempty"`
	Type         *string `json:"type,omitempty"`

	// Uptime on server
	Uptime  *int64  `json:"uptime,omitempty"`
	User    *User   `json:"user,omitempty"`
	Version *string `json:"version,omitempty"`
}

// User defines model for User.
type User struct {
	Auth *struct {
		// Embedded struct due to allOf(#/components/schemas/AuthMethods)
		AuthMethods `yaml:",inline"`
	} `json:"auth,omitempty"`

	// Display Name
	DisplayName *string `json:"displayName,omitempty"`

	// User email address
	Email             *string `json:"email,omitempty"`
	GlobalPermissions *struct {
		// Embedded struct due to allOf(#/components/schemas/Permissions)
		Permissions `yaml:",inline"`
	} `json:"globalPermissions,omitempty"`

	// User ID
	Id *string `json:"id,omitempty"`

	// Organization ID
	OrgId *string `json:"orgId,omitempty"`

	// SMS number
	SmsNumber *string `json:"smsNumber,omitempty"`

	// List of API token names.
	Tokens *[]string `json:"tokens,omitempty"`
}

// NewNetworkJSONBody defines parameters for NewNetwork.
type NewNetworkJSONBody map[string]interface{}

// UpdateNetworkJSONBody defines parameters for UpdateNetwork.
type UpdateNetworkJSONBody Network

// UpdateNetworkMemberJSONBody defines parameters for UpdateNetworkMember.
type UpdateNetworkMemberJSONBody Member

// InviteUserByEmailJSONBody defines parameters for InviteUserByEmail.
type InviteUserByEmailJSONBody OrganizationInvitation

// UpdateUserByIDJSONBody defines parameters for UpdateUserByID.
type UpdateUserByIDJSONBody User

// AddAPITokenJSONBody defines parameters for AddAPIToken.
type AddAPITokenJSONBody APIToken

// NewNetworkJSONRequestBody defines body for NewNetwork for application/json ContentType.
type NewNetworkJSONRequestBody NewNetworkJSONBody

// UpdateNetworkJSONRequestBody defines body for UpdateNetwork for application/json ContentType.
type UpdateNetworkJSONRequestBody UpdateNetworkJSONBody

// UpdateNetworkMemberJSONRequestBody defines body for UpdateNetworkMember for application/json ContentType.
type UpdateNetworkMemberJSONRequestBody UpdateNetworkMemberJSONBody

// InviteUserByEmailJSONRequestBody defines body for InviteUserByEmail for application/json ContentType.
type InviteUserByEmailJSONRequestBody InviteUserByEmailJSONBody

// UpdateUserByIDJSONRequestBody defines body for UpdateUserByID for application/json ContentType.
type UpdateUserByIDJSONRequestBody UpdateUserByIDJSONBody

// AddAPITokenJSONRequestBody defines body for AddAPIToken for application/json ContentType.
type AddAPITokenJSONRequestBody AddAPITokenJSONBody

// Getter for additional properties for PermissionsMap. Returns the specified
// element and whether it was found
func (a PermissionsMap) Get(fieldName string) (value Permissions, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PermissionsMap
func (a *PermissionsMap) Set(fieldName string, value Permissions) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Permissions)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PermissionsMap to handle AdditionalProperties
func (a *PermissionsMap) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Permissions)
		for fieldName, fieldBuf := range object {
			var fieldVal Permissions
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PermissionsMap to handle AdditionalProperties
func (a PermissionsMap) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetNetworkList request
	GetNetworkList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NewNetwork request  with any body
	NewNetworkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NewNetwork(ctx context.Context, body NewNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNetwork request
	DeleteNetwork(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworkByID request
	GetNetworkByID(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNetwork request  with any body
	UpdateNetworkWithBody(ctx context.Context, networkID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNetwork(ctx context.Context, networkID string, body UpdateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworkMemberList request
	GetNetworkMemberList(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNetworkMember request
	DeleteNetworkMember(ctx context.Context, networkID string, memberID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworkMember request
	GetNetworkMember(ctx context.Context, networkID string, memberID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNetworkMember request  with any body
	UpdateNetworkMemberWithBody(ctx context.Context, networkID string, memberID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNetworkMember(ctx context.Context, networkID string, memberID string, body UpdateNetworkMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationInvitationList request
	GetOrganizationInvitationList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InviteUserByEmail request  with any body
	InviteUserByEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InviteUserByEmail(ctx context.Context, body InviteUserByEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeclineInvitation request
	DeclineInvitation(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvitationByID request
	GetInvitationByID(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptInvitation request
	AcceptInvitation(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationByID request
	GetOrganizationByID(ctx context.Context, orgID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationMembers request
	GetOrganizationMembers(ctx context.Context, orgID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRandomToken request
	GetRandomToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserByID request
	DeleteUserByID(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserByID request
	GetUserByID(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserByID request  with any body
	UpdateUserByIDWithBody(ctx context.Context, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserByID(ctx context.Context, userID string, body UpdateUserByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAPIToken request  with any body
	AddAPITokenWithBody(ctx context.Context, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAPIToken(ctx context.Context, userID string, body AddAPITokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIToken request
	DeleteAPIToken(ctx context.Context, userID string, tokenName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetNetworkList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewNetworkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewNetworkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewNetwork(ctx context.Context, body NewNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewNetworkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNetwork(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNetworkRequest(c.Server, networkID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworkByID(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkByIDRequest(c.Server, networkID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNetworkWithBody(ctx context.Context, networkID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNetworkRequestWithBody(c.Server, networkID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNetwork(ctx context.Context, networkID string, body UpdateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNetworkRequest(c.Server, networkID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworkMemberList(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkMemberListRequest(c.Server, networkID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNetworkMember(ctx context.Context, networkID string, memberID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNetworkMemberRequest(c.Server, networkID, memberID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworkMember(ctx context.Context, networkID string, memberID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkMemberRequest(c.Server, networkID, memberID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNetworkMemberWithBody(ctx context.Context, networkID string, memberID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNetworkMemberRequestWithBody(c.Server, networkID, memberID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNetworkMember(ctx context.Context, networkID string, memberID string, body UpdateNetworkMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNetworkMemberRequest(c.Server, networkID, memberID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationInvitationList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationInvitationListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteUserByEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteUserByEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteUserByEmail(ctx context.Context, body InviteUserByEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteUserByEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeclineInvitation(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeclineInvitationRequest(c.Server, inviteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvitationByID(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvitationByIDRequest(c.Server, inviteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptInvitation(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptInvitationRequest(c.Server, inviteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationByID(ctx context.Context, orgID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationByIDRequest(c.Server, orgID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationMembers(ctx context.Context, orgID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationMembersRequest(c.Server, orgID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRandomToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRandomTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserByID(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserByIDRequest(c.Server, userID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserByID(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByIDRequest(c.Server, userID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserByIDWithBody(ctx context.Context, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserByIDRequestWithBody(c.Server, userID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserByID(ctx context.Context, userID string, body UpdateUserByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserByIDRequest(c.Server, userID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAPITokenWithBody(ctx context.Context, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAPITokenRequestWithBody(c.Server, userID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAPIToken(ctx context.Context, userID string, body AddAPITokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAPITokenRequest(c.Server, userID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIToken(ctx context.Context, userID string, tokenName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPITokenRequest(c.Server, userID, tokenName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetNetworkListRequest generates requests for GetNetworkList
func NewGetNetworkListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNewNetworkRequest calls the generic NewNetwork builder with application/json body
func NewNewNetworkRequest(server string, body NewNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNewNetworkRequestWithBody(server, "application/json", bodyReader)
}

// NewNewNetworkRequestWithBody generates requests for NewNetwork with any type of body
func NewNewNetworkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNetworkRequest generates requests for DeleteNetwork
func NewDeleteNetworkRequest(server string, networkID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNetworkByIDRequest generates requests for GetNetworkByID
func NewGetNetworkByIDRequest(server string, networkID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNetworkRequest calls the generic UpdateNetwork builder with application/json body
func NewUpdateNetworkRequest(server string, networkID string, body UpdateNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNetworkRequestWithBody(server, networkID, "application/json", bodyReader)
}

// NewUpdateNetworkRequestWithBody generates requests for UpdateNetwork with any type of body
func NewUpdateNetworkRequestWithBody(server string, networkID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNetworkMemberListRequest generates requests for GetNetworkMemberList
func NewGetNetworkMemberListRequest(server string, networkID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/%s/member", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNetworkMemberRequest generates requests for DeleteNetworkMember
func NewDeleteNetworkMemberRequest(server string, networkID string, memberID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "memberID", runtime.ParamLocationPath, memberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/%s/member/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNetworkMemberRequest generates requests for GetNetworkMember
func NewGetNetworkMemberRequest(server string, networkID string, memberID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "memberID", runtime.ParamLocationPath, memberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/%s/member/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNetworkMemberRequest calls the generic UpdateNetworkMember builder with application/json body
func NewUpdateNetworkMemberRequest(server string, networkID string, memberID string, body UpdateNetworkMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNetworkMemberRequestWithBody(server, networkID, memberID, "application/json", bodyReader)
}

// NewUpdateNetworkMemberRequestWithBody generates requests for UpdateNetworkMember with any type of body
func NewUpdateNetworkMemberRequestWithBody(server string, networkID string, memberID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "memberID", runtime.ParamLocationPath, memberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/%s/member/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationInvitationListRequest generates requests for GetOrganizationInvitationList
func NewGetOrganizationInvitationListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org-invitation")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInviteUserByEmailRequest calls the generic InviteUserByEmail builder with application/json body
func NewInviteUserByEmailRequest(server string, body InviteUserByEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInviteUserByEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewInviteUserByEmailRequestWithBody generates requests for InviteUserByEmail with any type of body
func NewInviteUserByEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org-invitation")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeclineInvitationRequest generates requests for DeclineInvitation
func NewDeclineInvitationRequest(server string, inviteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteID", runtime.ParamLocationPath, inviteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org-invitation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvitationByIDRequest generates requests for GetInvitationByID
func NewGetInvitationByIDRequest(server string, inviteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteID", runtime.ParamLocationPath, inviteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org-invitation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptInvitationRequest generates requests for AcceptInvitation
func NewAcceptInvitationRequest(server string, inviteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteID", runtime.ParamLocationPath, inviteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org-invitation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationByIDRequest generates requests for GetOrganizationByID
func NewGetOrganizationByIDRequest(server string, orgID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgID", runtime.ParamLocationPath, orgID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationMembersRequest generates requests for GetOrganizationMembers
func NewGetOrganizationMembersRequest(server string, orgID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgID", runtime.ParamLocationPath, orgID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org/%s/user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRandomTokenRequest generates requests for GetRandomToken
func NewGetRandomTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/randomToken")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserByIDRequest generates requests for DeleteUserByID
func NewDeleteUserByIDRequest(server string, userID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserByIDRequest generates requests for GetUserByID
func NewGetUserByIDRequest(server string, userID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserByIDRequest calls the generic UpdateUserByID builder with application/json body
func NewUpdateUserByIDRequest(server string, userID string, body UpdateUserByIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserByIDRequestWithBody(server, userID, "application/json", bodyReader)
}

// NewUpdateUserByIDRequestWithBody generates requests for UpdateUserByID with any type of body
func NewUpdateUserByIDRequestWithBody(server string, userID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddAPITokenRequest calls the generic AddAPIToken builder with application/json body
func NewAddAPITokenRequest(server string, userID string, body AddAPITokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAPITokenRequestWithBody(server, userID, "application/json", bodyReader)
}

// NewAddAPITokenRequestWithBody generates requests for AddAPIToken with any type of body
func NewAddAPITokenRequestWithBody(server string, userID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPITokenRequest generates requests for DeleteAPIToken
func NewDeleteAPITokenRequest(server string, userID string, tokenName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenName", runtime.ParamLocationPath, tokenName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/token/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetNetworkList request
	GetNetworkListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNetworkListResponse, error)

	// NewNetwork request  with any body
	NewNetworkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NewNetworkResponse, error)

	NewNetworkWithResponse(ctx context.Context, body NewNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*NewNetworkResponse, error)

	// DeleteNetwork request
	DeleteNetworkWithResponse(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*DeleteNetworkResponse, error)

	// GetNetworkByID request
	GetNetworkByIDWithResponse(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*GetNetworkByIDResponse, error)

	// UpdateNetwork request  with any body
	UpdateNetworkWithBodyWithResponse(ctx context.Context, networkID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNetworkResponse, error)

	UpdateNetworkWithResponse(ctx context.Context, networkID string, body UpdateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNetworkResponse, error)

	// GetNetworkMemberList request
	GetNetworkMemberListWithResponse(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*GetNetworkMemberListResponse, error)

	// DeleteNetworkMember request
	DeleteNetworkMemberWithResponse(ctx context.Context, networkID string, memberID string, reqEditors ...RequestEditorFn) (*DeleteNetworkMemberResponse, error)

	// GetNetworkMember request
	GetNetworkMemberWithResponse(ctx context.Context, networkID string, memberID string, reqEditors ...RequestEditorFn) (*GetNetworkMemberResponse, error)

	// UpdateNetworkMember request  with any body
	UpdateNetworkMemberWithBodyWithResponse(ctx context.Context, networkID string, memberID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNetworkMemberResponse, error)

	UpdateNetworkMemberWithResponse(ctx context.Context, networkID string, memberID string, body UpdateNetworkMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNetworkMemberResponse, error)

	// GetOrganization request
	GetOrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// GetOrganizationInvitationList request
	GetOrganizationInvitationListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationInvitationListResponse, error)

	// InviteUserByEmail request  with any body
	InviteUserByEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteUserByEmailResponse, error)

	InviteUserByEmailWithResponse(ctx context.Context, body InviteUserByEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteUserByEmailResponse, error)

	// DeclineInvitation request
	DeclineInvitationWithResponse(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*DeclineInvitationResponse, error)

	// GetInvitationByID request
	GetInvitationByIDWithResponse(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*GetInvitationByIDResponse, error)

	// AcceptInvitation request
	AcceptInvitationWithResponse(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*AcceptInvitationResponse, error)

	// GetOrganizationByID request
	GetOrganizationByIDWithResponse(ctx context.Context, orgID string, reqEditors ...RequestEditorFn) (*GetOrganizationByIDResponse, error)

	// GetOrganizationMembers request
	GetOrganizationMembersWithResponse(ctx context.Context, orgID string, reqEditors ...RequestEditorFn) (*GetOrganizationMembersResponse, error)

	// GetRandomToken request
	GetRandomTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomTokenResponse, error)

	// GetStatus request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// DeleteUserByID request
	DeleteUserByIDWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*DeleteUserByIDResponse, error)

	// GetUserByID request
	GetUserByIDWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*GetUserByIDResponse, error)

	// UpdateUserByID request  with any body
	UpdateUserByIDWithBodyWithResponse(ctx context.Context, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserByIDResponse, error)

	UpdateUserByIDWithResponse(ctx context.Context, userID string, body UpdateUserByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserByIDResponse, error)

	// AddAPIToken request  with any body
	AddAPITokenWithBodyWithResponse(ctx context.Context, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAPITokenResponse, error)

	AddAPITokenWithResponse(ctx context.Context, userID string, body AddAPITokenJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAPITokenResponse, error)

	// DeleteAPIToken request
	DeleteAPITokenWithResponse(ctx context.Context, userID string, tokenName string, reqEditors ...RequestEditorFn) (*DeleteAPITokenResponse, error)
}

type GetNetworkListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Network
}

// Status returns HTTPResponse.Status
func (r GetNetworkListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NewNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Network
}

// Status returns HTTPResponse.Status
func (r NewNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworkByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Network
}

// Status returns HTTPResponse.Status
func (r GetNetworkByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Network
}

// Status returns HTTPResponse.Status
func (r UpdateNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworkMemberListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Member
}

// Status returns HTTPResponse.Status
func (r GetNetworkMemberListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkMemberListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNetworkMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNetworkMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNetworkMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworkMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Member
}

// Status returns HTTPResponse.Status
func (r GetNetworkMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNetworkMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Member
}

// Status returns HTTPResponse.Status
func (r UpdateNetworkMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNetworkMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationInvitationListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationInvitation
}

// Status returns HTTPResponse.Status
func (r GetOrganizationInvitationListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationInvitationListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InviteUserByEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationInvitation
}

// Status returns HTTPResponse.Status
func (r InviteUserByEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InviteUserByEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeclineInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeclineInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeclineInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvitationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationInvitation
}

// Status returns HTTPResponse.Status
func (r GetInvitationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvitationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationInvitation
}

// Status returns HTTPResponse.Status
func (r AcceptInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r GetOrganizationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationMember
}

// Status returns HTTPResponse.Status
func (r GetOrganizationMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRandomTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RandomToken
}

// Status returns HTTPResponse.Status
func (r GetRandomTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRandomTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UpdateUserByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAPITokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIToken
}

// Status returns HTTPResponse.Status
func (r AddAPITokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAPITokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPITokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPITokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPITokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetNetworkListWithResponse request returning *GetNetworkListResponse
func (c *ClientWithResponses) GetNetworkListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNetworkListResponse, error) {
	rsp, err := c.GetNetworkList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkListResponse(rsp)
}

// NewNetworkWithBodyWithResponse request with arbitrary body returning *NewNetworkResponse
func (c *ClientWithResponses) NewNetworkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NewNetworkResponse, error) {
	rsp, err := c.NewNetworkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewNetworkResponse(rsp)
}

func (c *ClientWithResponses) NewNetworkWithResponse(ctx context.Context, body NewNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*NewNetworkResponse, error) {
	rsp, err := c.NewNetwork(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewNetworkResponse(rsp)
}

// DeleteNetworkWithResponse request returning *DeleteNetworkResponse
func (c *ClientWithResponses) DeleteNetworkWithResponse(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*DeleteNetworkResponse, error) {
	rsp, err := c.DeleteNetwork(ctx, networkID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNetworkResponse(rsp)
}

// GetNetworkByIDWithResponse request returning *GetNetworkByIDResponse
func (c *ClientWithResponses) GetNetworkByIDWithResponse(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*GetNetworkByIDResponse, error) {
	rsp, err := c.GetNetworkByID(ctx, networkID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkByIDResponse(rsp)
}

// UpdateNetworkWithBodyWithResponse request with arbitrary body returning *UpdateNetworkResponse
func (c *ClientWithResponses) UpdateNetworkWithBodyWithResponse(ctx context.Context, networkID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNetworkResponse, error) {
	rsp, err := c.UpdateNetworkWithBody(ctx, networkID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNetworkResponse(rsp)
}

func (c *ClientWithResponses) UpdateNetworkWithResponse(ctx context.Context, networkID string, body UpdateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNetworkResponse, error) {
	rsp, err := c.UpdateNetwork(ctx, networkID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNetworkResponse(rsp)
}

// GetNetworkMemberListWithResponse request returning *GetNetworkMemberListResponse
func (c *ClientWithResponses) GetNetworkMemberListWithResponse(ctx context.Context, networkID string, reqEditors ...RequestEditorFn) (*GetNetworkMemberListResponse, error) {
	rsp, err := c.GetNetworkMemberList(ctx, networkID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkMemberListResponse(rsp)
}

// DeleteNetworkMemberWithResponse request returning *DeleteNetworkMemberResponse
func (c *ClientWithResponses) DeleteNetworkMemberWithResponse(ctx context.Context, networkID string, memberID string, reqEditors ...RequestEditorFn) (*DeleteNetworkMemberResponse, error) {
	rsp, err := c.DeleteNetworkMember(ctx, networkID, memberID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNetworkMemberResponse(rsp)
}

// GetNetworkMemberWithResponse request returning *GetNetworkMemberResponse
func (c *ClientWithResponses) GetNetworkMemberWithResponse(ctx context.Context, networkID string, memberID string, reqEditors ...RequestEditorFn) (*GetNetworkMemberResponse, error) {
	rsp, err := c.GetNetworkMember(ctx, networkID, memberID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkMemberResponse(rsp)
}

// UpdateNetworkMemberWithBodyWithResponse request with arbitrary body returning *UpdateNetworkMemberResponse
func (c *ClientWithResponses) UpdateNetworkMemberWithBodyWithResponse(ctx context.Context, networkID string, memberID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNetworkMemberResponse, error) {
	rsp, err := c.UpdateNetworkMemberWithBody(ctx, networkID, memberID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNetworkMemberResponse(rsp)
}

func (c *ClientWithResponses) UpdateNetworkMemberWithResponse(ctx context.Context, networkID string, memberID string, body UpdateNetworkMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNetworkMemberResponse, error) {
	rsp, err := c.UpdateNetworkMember(ctx, networkID, memberID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNetworkMemberResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// GetOrganizationInvitationListWithResponse request returning *GetOrganizationInvitationListResponse
func (c *ClientWithResponses) GetOrganizationInvitationListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationInvitationListResponse, error) {
	rsp, err := c.GetOrganizationInvitationList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationInvitationListResponse(rsp)
}

// InviteUserByEmailWithBodyWithResponse request with arbitrary body returning *InviteUserByEmailResponse
func (c *ClientWithResponses) InviteUserByEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteUserByEmailResponse, error) {
	rsp, err := c.InviteUserByEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteUserByEmailResponse(rsp)
}

func (c *ClientWithResponses) InviteUserByEmailWithResponse(ctx context.Context, body InviteUserByEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteUserByEmailResponse, error) {
	rsp, err := c.InviteUserByEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteUserByEmailResponse(rsp)
}

// DeclineInvitationWithResponse request returning *DeclineInvitationResponse
func (c *ClientWithResponses) DeclineInvitationWithResponse(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*DeclineInvitationResponse, error) {
	rsp, err := c.DeclineInvitation(ctx, inviteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeclineInvitationResponse(rsp)
}

// GetInvitationByIDWithResponse request returning *GetInvitationByIDResponse
func (c *ClientWithResponses) GetInvitationByIDWithResponse(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*GetInvitationByIDResponse, error) {
	rsp, err := c.GetInvitationByID(ctx, inviteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvitationByIDResponse(rsp)
}

// AcceptInvitationWithResponse request returning *AcceptInvitationResponse
func (c *ClientWithResponses) AcceptInvitationWithResponse(ctx context.Context, inviteID string, reqEditors ...RequestEditorFn) (*AcceptInvitationResponse, error) {
	rsp, err := c.AcceptInvitation(ctx, inviteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptInvitationResponse(rsp)
}

// GetOrganizationByIDWithResponse request returning *GetOrganizationByIDResponse
func (c *ClientWithResponses) GetOrganizationByIDWithResponse(ctx context.Context, orgID string, reqEditors ...RequestEditorFn) (*GetOrganizationByIDResponse, error) {
	rsp, err := c.GetOrganizationByID(ctx, orgID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationByIDResponse(rsp)
}

// GetOrganizationMembersWithResponse request returning *GetOrganizationMembersResponse
func (c *ClientWithResponses) GetOrganizationMembersWithResponse(ctx context.Context, orgID string, reqEditors ...RequestEditorFn) (*GetOrganizationMembersResponse, error) {
	rsp, err := c.GetOrganizationMembers(ctx, orgID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationMembersResponse(rsp)
}

// GetRandomTokenWithResponse request returning *GetRandomTokenResponse
func (c *ClientWithResponses) GetRandomTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomTokenResponse, error) {
	rsp, err := c.GetRandomToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRandomTokenResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// DeleteUserByIDWithResponse request returning *DeleteUserByIDResponse
func (c *ClientWithResponses) DeleteUserByIDWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*DeleteUserByIDResponse, error) {
	rsp, err := c.DeleteUserByID(ctx, userID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserByIDResponse(rsp)
}

// GetUserByIDWithResponse request returning *GetUserByIDResponse
func (c *ClientWithResponses) GetUserByIDWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*GetUserByIDResponse, error) {
	rsp, err := c.GetUserByID(ctx, userID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByIDResponse(rsp)
}

// UpdateUserByIDWithBodyWithResponse request with arbitrary body returning *UpdateUserByIDResponse
func (c *ClientWithResponses) UpdateUserByIDWithBodyWithResponse(ctx context.Context, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserByIDResponse, error) {
	rsp, err := c.UpdateUserByIDWithBody(ctx, userID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserByIDResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserByIDWithResponse(ctx context.Context, userID string, body UpdateUserByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserByIDResponse, error) {
	rsp, err := c.UpdateUserByID(ctx, userID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserByIDResponse(rsp)
}

// AddAPITokenWithBodyWithResponse request with arbitrary body returning *AddAPITokenResponse
func (c *ClientWithResponses) AddAPITokenWithBodyWithResponse(ctx context.Context, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAPITokenResponse, error) {
	rsp, err := c.AddAPITokenWithBody(ctx, userID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAPITokenResponse(rsp)
}

func (c *ClientWithResponses) AddAPITokenWithResponse(ctx context.Context, userID string, body AddAPITokenJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAPITokenResponse, error) {
	rsp, err := c.AddAPIToken(ctx, userID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAPITokenResponse(rsp)
}

// DeleteAPITokenWithResponse request returning *DeleteAPITokenResponse
func (c *ClientWithResponses) DeleteAPITokenWithResponse(ctx context.Context, userID string, tokenName string, reqEditors ...RequestEditorFn) (*DeleteAPITokenResponse, error) {
	rsp, err := c.DeleteAPIToken(ctx, userID, tokenName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPITokenResponse(rsp)
}

// ParseGetNetworkListResponse parses an HTTP response from a GetNetworkListWithResponse call
func ParseGetNetworkListResponse(rsp *http.Response) (*GetNetworkListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Network
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNewNetworkResponse parses an HTTP response from a NewNetworkWithResponse call
func ParseNewNetworkResponse(rsp *http.Response) (*NewNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NewNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Network
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteNetworkResponse parses an HTTP response from a DeleteNetworkWithResponse call
func ParseDeleteNetworkResponse(rsp *http.Response) (*DeleteNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNetworkByIDResponse parses an HTTP response from a GetNetworkByIDWithResponse call
func ParseGetNetworkByIDResponse(rsp *http.Response) (*GetNetworkByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Network
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateNetworkResponse parses an HTTP response from a UpdateNetworkWithResponse call
func ParseUpdateNetworkResponse(rsp *http.Response) (*UpdateNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Network
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNetworkMemberListResponse parses an HTTP response from a GetNetworkMemberListWithResponse call
func ParseGetNetworkMemberListResponse(rsp *http.Response) (*GetNetworkMemberListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkMemberListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Member
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteNetworkMemberResponse parses an HTTP response from a DeleteNetworkMemberWithResponse call
func ParseDeleteNetworkMemberResponse(rsp *http.Response) (*DeleteNetworkMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteNetworkMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNetworkMemberResponse parses an HTTP response from a GetNetworkMemberWithResponse call
func ParseGetNetworkMemberResponse(rsp *http.Response) (*GetNetworkMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Member
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateNetworkMemberResponse parses an HTTP response from a UpdateNetworkMemberWithResponse call
func ParseUpdateNetworkMemberResponse(rsp *http.Response) (*UpdateNetworkMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNetworkMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Member
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationInvitationListResponse parses an HTTP response from a GetOrganizationInvitationListWithResponse call
func ParseGetOrganizationInvitationListResponse(rsp *http.Response) (*GetOrganizationInvitationListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationInvitationListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInviteUserByEmailResponse parses an HTTP response from a InviteUserByEmailWithResponse call
func ParseInviteUserByEmailResponse(rsp *http.Response) (*InviteUserByEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InviteUserByEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeclineInvitationResponse parses an HTTP response from a DeclineInvitationWithResponse call
func ParseDeclineInvitationResponse(rsp *http.Response) (*DeclineInvitationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeclineInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInvitationByIDResponse parses an HTTP response from a GetInvitationByIDWithResponse call
func ParseGetInvitationByIDResponse(rsp *http.Response) (*GetInvitationByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInvitationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcceptInvitationResponse parses an HTTP response from a AcceptInvitationWithResponse call
func ParseAcceptInvitationResponse(rsp *http.Response) (*AcceptInvitationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AcceptInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationByIDResponse parses an HTTP response from a GetOrganizationByIDWithResponse call
func ParseGetOrganizationByIDResponse(rsp *http.Response) (*GetOrganizationByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationMembersResponse parses an HTTP response from a GetOrganizationMembersWithResponse call
func ParseGetOrganizationMembersResponse(rsp *http.Response) (*GetOrganizationMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRandomTokenResponse parses an HTTP response from a GetRandomTokenWithResponse call
func ParseGetRandomTokenResponse(rsp *http.Response) (*GetRandomTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRandomTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RandomToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserByIDResponse parses an HTTP response from a DeleteUserByIDWithResponse call
func ParseDeleteUserByIDResponse(rsp *http.Response) (*DeleteUserByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserByIDResponse parses an HTTP response from a GetUserByIDWithResponse call
func ParseGetUserByIDResponse(rsp *http.Response) (*GetUserByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserByIDResponse parses an HTTP response from a UpdateUserByIDWithResponse call
func ParseUpdateUserByIDResponse(rsp *http.Response) (*UpdateUserByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddAPITokenResponse parses an HTTP response from a AddAPITokenWithResponse call
func ParseAddAPITokenResponse(rsp *http.Response) (*AddAPITokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddAPITokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAPITokenResponse parses an HTTP response from a DeleteAPITokenWithResponse call
func ParseDeleteAPITokenResponse(rsp *http.Response) (*DeleteAPITokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPITokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}
